/*++

Licensed under the Apache-2.0 license.

File Name:

ml_dsa87.rs

Abstract:

File contains Ml_Dsa87 peripheral implementation.

--*/

use crate::helpers::{bytes_from_words_le, words_from_bytes_le};
use crate::{KeyUsage, KeyVault};
use caliptra_emu_bus::{ActionHandle, BusError, Clock, ReadOnlyRegister, ReadWriteRegister, Timer};
use caliptra_emu_derive::Bus;
use caliptra_emu_types::{RvData, RvSize};
use fips204::ml_dsa_87::{try_keygen_with_rng, PrivateKey, PublicKey, PK_LEN, SIG_LEN, SK_LEN};
use fips204::traits::{SerDes, Signer, Verifier};
use rand::rngs::StdRng;
use rand::SeedableRng;
use tock_registers::interfaces::{ReadWriteable, Readable, Writeable};
use tock_registers::register_bitfields;
use zerocopy::AsBytes;

// In HW format
const MESSAGE: [u8; 64] = [
    0xad, 0x02, 0xa1, 0x24, 0x47, 0x66, 0xf3, 0x76, 0xe8, 0x21, 0x3a, 0x1a, 0x4f, 0x17, 0xdf, 0x64,
    0x78, 0x3c, 0xa8, 0x37, 0x94, 0xd0, 0x15, 0xf3, 0xc8, 0x24, 0x5c, 0xa2, 0xc8, 0x49, 0x34, 0x62,
    0x2e, 0x77, 0x38, 0xf2, 0x5e, 0x98, 0xc9, 0x6c, 0x6d, 0x08, 0x4a, 0x82, 0x55, 0x24, 0xb3, 0xe0,
    0x29, 0xda, 0x22, 0x0b, 0xb6, 0xca, 0x3a, 0x6c, 0xdb, 0xaa, 0xed, 0xbe, 0xdf, 0x49, 0x17, 0xa1,
];

// In non-HW format
const VENDOR_MLDSA_KEY_1_PRIVATE: [u32; 1224] = [
    0xe5e3f445, 0xa7952561, 0x4cf28a96, 0x523f5b7d, 0xfe24361b, 0xf92e16e7, 0x8a8a5cbd, 0x4510d3c0,
    0x5f540f87, 0x6d8bd7d1, 0xf2e0042a, 0xc1419a3c, 0x1c35d881, 0xda4795b2, 0x94488556, 0xeb641b36,
    0x4ef8bc8c, 0x42ea418d, 0x24108387, 0x848da6c6, 0xa899ff0e, 0xc282337c, 0xd844b733, 0xa80ac842,
    0x093a5e43, 0x3c15b68e, 0xcf40d2d0, 0x765958d2, 0xfbb715b2, 0x77420c3d, 0xc93c12f6, 0x99546469,
    0xa492311c, 0x389188a4, 0x09381b45, 0x8a29b28b, 0x469a8e42, 0x31806270, 0xa420905a, 0xc5208438,
    0x9018d90c, 0x9171869a, 0xa9187228, 0x6916d18d, 0xc825c062, 0x04647138, 0x92228990, 0x24708653,
    0xb2c82012, 0x12469869, 0x142102da, 0xa66325a8, 0x0a365168, 0xcc08c509, 0x96a14026, 0x70106089,
    0x1102390c, 0x886268c5, 0x90801969, 0x8c85231a, 0x86926a18, 0x20906348, 0x9c521044, 0x400470b8,
    0x8c48480a, 0x83121320, 0x94822886, 0x81185428, 0x4c064518, 0x30119238, 0x21c84c0d, 0xe0093849,
    0x44998640, 0x5111032d, 0x8c71b8dc, 0x491b6908, 0x6141200d, 0x4811b4a4, 0x82604428, 0x00c20250,
    0x0a890602, 0x10988512, 0x3128002e, 0x0265a40c, 0x009a0843, 0x40b51890, 0x548e0203, 0x90227016,
    0x6944da51, 0x84703858, 0x18d410a6, 0x24410481, 0x012814c2, 0x44609221, 0x4002c381, 0x8c6e3819,
    0x14cb8538, 0x8a082242, 0x40809253, 0xb65b4484, 0x2e431c68, 0x4b324712, 0x94e205b6, 0x28a50b88,
    0xcb5180d2, 0x06c149b4, 0x72251965, 0x9125a24c, 0x88dc4222, 0x40432410, 0x9280c858, 0x36a08500,
    0x61122164, 0x23894802, 0x22624094, 0x5012db4c, 0x98090288, 0x340c8d94, 0x29289c2e, 0x1b860222,
    0xc88c2120, 0x6ca48a69, 0xd92e249b, 0x371a0218, 0x50945301, 0x938c08d9, 0x48442cb4, 0x61a66448,
    0x18802923, 0x150985a0, 0x65c32182, 0xdb0a48e0, 0x18c811a8, 0x7234dc02, 0x1c21931b, 0x04612604,
    0x6e210889, 0x435108d1, 0x48544982, 0x48c30b11, 0xd40d3001, 0x340065c4, 0x8c10d84c, 0xc1921891,
    0xc2084e28, 0x48b00070, 0x212c9448, 0x911c0cb0, 0x40a0820c, 0x00093502, 0x02134517, 0x51b2494c,
    0xd80092c3, 0xb68208a6, 0x28091069, 0x448404db, 0x28101104, 0x2a44188a, 0x4b48211a, 0x88d02434,
    0x06446308, 0x23603308, 0x22490921, 0x50391806, 0x1a5136e3, 0x84436e17, 0x91402068, 0x886496db,
    0xc04164b2, 0x4a12dc71, 0x0984c259, 0xa89a04b1, 0x4c401305, 0x0c84a65a, 0x300c31c8, 0x80244232,
    0xe348c480, 0x46c24e22, 0x0cb00a66, 0x989094c3, 0x33116046, 0x8420a422, 0x91502619, 0x05224848,
    0x6822882e, 0x032d211a, 0x929b2833, 0x4214810d, 0x20491459, 0x92124027, 0x8d986364, 0xda49b70b,
    0xb24b0238, 0x21c66351, 0x61442219, 0x312225b8, 0x01b29b52, 0x0a463001, 0x84982045, 0x2db10470,
    0x1970251a, 0xc5182645, 0x6517218c, 0x020d3402, 0xb4422885, 0x6880e365, 0x020a2613, 0xa4c02014,
    0x41b85301, 0x8105a062, 0x98818d10, 0x71209211, 0x0b2db080, 0x200a6911, 0x85a08c51, 0x044d3324,
    0x261b9193, 0x7096d122, 0x0271a853, 0x39216583, 0x91324865, 0x028d3280, 0x18924149, 0x1198cc21,
    0xc125b324, 0x121a2c36, 0x84085900, 0x1921b4c1, 0x28e011c0, 0x5026124c, 0x21321093, 0x04e41207,
    0x0c331c24, 0x63510924, 0x92010e36, 0x20340880, 0x1828950c, 0x99184929, 0x2885046c, 0x1c894052,
    0x18016929, 0x68886160, 0xa331a291, 0xb1128848, 0x69161491, 0xd32ca2c0, 0xc30048b2, 0x8c444909,
    0x834c8724, 0xb90b8ca4, 0x1028c311, 0xa049a4d8, 0x386340a0, 0x2940da26, 0xc089845a, 0xb8c37126,
    0x7018522d, 0x238a3820, 0xc8d341c1, 0x2e30a421, 0x9811a840, 0xa80c6942, 0x10444a84, 0x83898002,
    0x121c70b4, 0x20231481, 0x1171c920, 0x94d10a23, 0x6c18e028, 0x490642d4, 0xb2635110, 0x65460c51,
    0x4b8c1204, 0x28116e24, 0x45490c6c, 0x21898092, 0x86da1025, 0x32030c69, 0x1c300018, 0xb31181a2,
    0x10042025, 0x428a370c, 0xb4818988, 0x81b66168, 0x81314693, 0xa9094cb4, 0x00b89900, 0x007036d8,
    0x09192c96, 0x0c90e16a, 0xd02d0611, 0xa6446a18, 0x41489001, 0x008d805a, 0x15110e31, 0x0108a06d,
    0x096a045b, 0x86c891a7, 0x01860288, 0xe068c302, 0x870169c6, 0x12221210, 0x0c5126c8, 0xa01225c2,
    0x28a42205, 0x000914e2, 0x360204a9, 0x2e02a084, 0x4370b864, 0xb11b0c44, 0x4d48a030, 0x1c114091,
    0x92992032, 0x68011208, 0xd12c245a, 0xb4614e38, 0x22471c65, 0x21844058, 0x86d10580, 0x9012a211,
    0x0c08b662, 0x25111000, 0x82080341, 0x92112893, 0x282324a8, 0x64805308, 0x4c860650, 0x38c24442,
    0x0c190005, 0xd9453888, 0x10d07094, 0x92081910, 0x23408060, 0x94d80d48, 0x8da31a4c, 0xd431844c,
    0x35204a22, 0x2188e272, 0xd890b892, 0x29040482, 0x91140c92, 0xc14c8319, 0xa0c04824, 0x0a02e468,
    0xc304941c, 0x86234040, 0x60010469, 0x02914423, 0xa32005a5, 0x4cb25849, 0x1424904a, 0xb11870b6,
    0x00a2990d, 0x605190a2, 0x32082810, 0x2148616a, 0x0c481604, 0x289b4c06, 0x0c164182, 0xd4900488,
    0x18606d40, 0x4cb69a50, 0x2031a409, 0x31145117, 0x9180934d, 0x4b28425c, 0xa2911124, 0x08429128,
    0xd3298324, 0x82146586, 0x2240a40d, 0x430004e0, 0xc70c3248, 0x4a362140, 0xe145c614, 0x04a42898,
    0x4a211846, 0x04202863, 0x16c070b4, 0x30306090, 0xa361b00c, 0x271b51c6, 0x6998594a, 0x190c3003,
    0x42d94918, 0x30122460, 0x640e460b, 0x42db0402, 0x0143020a, 0x41404819, 0x02590608, 0x2082da60,
    0x3a474968, 0xbc66e468, 0x08ea3749, 0xb5c3fc4f, 0x4b0266e7, 0xa38db9c3, 0xd57499b1, 0xb0277047,
    0x24c2ad6d, 0x2e8144bf, 0x65203f13, 0x13d85829, 0x2defb169, 0xd116d6d5, 0x764f2b63, 0x66c5cf4d,
    0x1d864646, 0xd2b1515c, 0x8c38e4d6, 0xca429263, 0xf84c9e33, 0x928633bc, 0xbacfddbd, 0x339212fd,
    0xe7d07238, 0x1b48ceb6, 0x0f620469, 0x2e97872d, 0x1f3e2bce, 0x97501601, 0x6d4b62b7, 0xe166be22,
    0x2fa4b3f6, 0xfbf746d7, 0xc699c4f2, 0xa92ee99c, 0x502c96af, 0xc73d4fc1, 0xd536c692, 0x2c460f54,
    0x306a56e7, 0x839eb90e, 0xc5babfdd, 0xb7ead752, 0x639e33e0, 0x4c090406, 0xfe8c12ff, 0x4713c06b,
    0x92dd1b8b, 0xd4c381ef, 0x4416efdc, 0x69eb9afd, 0x704ca1e8, 0xd189cab2, 0x85d14aa6, 0x3d3cb68f,
    0x3918f565, 0xe88d6202, 0x084bce16, 0x5a4303c9, 0x5c81b81b, 0xc3851875, 0xd5774e56, 0x504ff790,
    0xa7989bcf, 0x2c51444e, 0xe1358d08, 0x82fd894f, 0x4c6aee47, 0xaa4dd5bf, 0x80d8123a, 0x6ebc3b95,
    0xe3d2f080, 0x937cd0b4, 0xcf07afaf, 0x82efa493, 0x7ea42ad9, 0x2c881be8, 0xc24a5259, 0x05613fa7,
    0xe388996c, 0x550158c4, 0x30dd2edd, 0xb97d56bd, 0xcee066cf, 0x6a65bf2c, 0x8b47b358, 0xb095534d,
    0xd8efd2f7, 0x84d5cead, 0x5b50fb9c, 0x05c8bc7b, 0xbd862ef9, 0x104a638d, 0x1955cd57, 0x5fd52acd,
    0x8bf132cd, 0x96860023, 0xbcf59743, 0x404aa754, 0x79879b6c, 0x2f1a40d1, 0x32f1fd15, 0x8d4f9960,
    0x6b672a37, 0x7fe4a624, 0x7dadda34, 0x62baa2a9, 0x8c6cd1e1, 0x9fee88ad, 0xf7a78a67, 0x113316ee,
    0x00219b76, 0x0fe940a4, 0x363305b7, 0x87fe7256, 0x6dac404f, 0xbb1c8291, 0x48a0e417, 0xb4dab291,
    0xf74feee2, 0x1d39bcc7, 0xf9d2e575, 0x43cc7097, 0xdbb37cc1, 0x824f3e1f, 0x6077d4f0, 0x97cd4c67,
    0x7fe8a10f, 0xeea106e6, 0x0d4d7ebc, 0x30ecf677, 0x67d5ebd9, 0x30546f44, 0x34b834db, 0x0edbe2a1,
    0xe62a2bc1, 0x3fcdc408, 0x06c25f53, 0x17a0cde1, 0xb6576b60, 0x9da4587c, 0xb5437c7d, 0xee74f068,
    0x1eb4df28, 0x59419fdd, 0x3e93ec5e, 0xde74db6e, 0xac6b61a4, 0xef2cb3e1, 0x70a1725e, 0xdb7d50c4,
    0x3a696353, 0x51211f36, 0xbae40cc6, 0x5ac3aab7, 0x3dd8e610, 0x871b30e2, 0x13c9fcbd, 0x120f5cb4,
    0x92419c04, 0x209bf4ee, 0x60d12fd0, 0xcbb4cf32, 0xecb27197, 0x5b60e334, 0xcccb20bd, 0x48def38d,
    0x057d1985, 0x28da4735, 0x6cb1b111, 0xc0e2a041, 0x8c8fe63a, 0xe3f2beb5, 0x60737bc6, 0x86713813,
    0x6184fd4e, 0x113d80fb, 0x4246a362, 0xab03733b, 0x0eea1118, 0xa9b589f2, 0xaa007ae8, 0x2a1b3932,
    0xdf426b4e, 0x4bf25e8b, 0xee8730f5, 0x63b27149, 0x9982ac7f, 0xb066e6a4, 0x4ff6bd69, 0xa70b23db,
    0x9a90ab5c, 0xd9094912, 0x557c743a, 0xe8e522bf, 0x1758c7aa, 0x6408f8bc, 0xef831f8d, 0xbc69168c,
    0xe03582dc, 0xa5917504, 0x082caade, 0x79caa730, 0xd78c6332, 0x0a53e55d, 0xcf5c82b2, 0x8e2986f7,
    0xbcda1a4a, 0x79ee212a, 0xdc5500df, 0x9c793da3, 0xf9532ca9, 0x399fb0b1, 0x5d9ab691, 0xf5dd0ed0,
    0xec4342f5, 0x3edad874, 0xc9bf915a, 0x53ddb8ce, 0x080c36a2, 0x825b451e, 0xc374494b, 0x0e9fd7b1,
    0x136c11e9, 0xa6df159f, 0xc1107847, 0xaf93124c, 0xbb82c6d3, 0x9eae13eb, 0xd6c54bf0, 0x23fca848,
    0x2955e4b1, 0x09e66ebc, 0xdc049b3d, 0xdb986e55, 0x2b9b03a1, 0x882531d0, 0x43f752bf, 0x2770dd2a,
    0x6fd43db4, 0xbfc9cd64, 0xabe342b2, 0x6d6e5d43, 0x06b2ee50, 0x5d97f3d3, 0x821dc73a, 0x592b56ff,
    0x1bfe995e, 0x554ba91e, 0x5003750b, 0x3b773c3b, 0x88538eb3, 0xff54bd5f, 0x0e7f1b67, 0xe78a0c7a,
    0xf0268f7a, 0x44fc50da, 0x4480985e, 0x0334e69b, 0xc385876b, 0x0eacd488, 0xe874ea39, 0x5612c736,
    0xc3e6638e, 0x99b1b09d, 0x33faddd1, 0x35a4aadd, 0x8b7909ed, 0x49b71c03, 0xdcb91d0b, 0xb6fbe1ce,
    0x55797127, 0x156e2578, 0xca600c04, 0xec3186b2, 0x3bddbd3e, 0x2a64fbf1, 0x6ce65390, 0xf13b9e02,
    0x1ddefc1f, 0x4d1f3965, 0xdc93f29a, 0x1432cc89, 0xd3430384, 0x2f5fbdb0, 0xcc377920, 0x7eb9a5cb,
    0x4d5fec3b, 0x5e377f76, 0x3f39a12c, 0xf6ef4aaa, 0xe409954e, 0xb5573bfb, 0x04a31218, 0x0e9ca66b,
    0xbd90b66b, 0xed0450c5, 0x36a9db81, 0x37803c09, 0x97374ccf, 0x06d10614, 0xd063be98, 0x5b3b1ef6,
    0x5fef0233, 0x4b7960c3, 0xad830177, 0x20be822d, 0xf03fab2a, 0x05ab9cfa, 0x4359294b, 0x0258ea7a,
    0xe3051fc5, 0x86ecd5fd, 0xbeb11855, 0x960bc1e7, 0x4ea2064b, 0xbc10be11, 0x2a9d6d8a, 0x12184387,
    0x4417baeb, 0x5bdf72ee, 0xeda69ec7, 0x5494b607, 0x39c4c10a, 0x352c5425, 0xc5a8a150, 0x4a8d678e,
    0xd8166fb0, 0x66d21145, 0xc8b97850, 0xdbe7f6b7, 0xe8737a64, 0x8966c81f, 0xc70be6c5, 0x572d1409,
    0x4b390f90, 0x0a0a8f15, 0x5ae8754a, 0xd9fe73e4, 0xcdac2486, 0x1c13b0db, 0x42cdbec7, 0x0ee24aed,
    0xd487d6c3, 0xa2ea2dd9, 0xfcc257bd, 0xd7e0a4b4, 0x53b1b3ab, 0xd6fcfe1d, 0x460f3144, 0xdbf69b13,
    0x60e5046e, 0xfc3aa409, 0x5a0cafed, 0x15cd04d1, 0x42f5c01f, 0x4ff2e3aa, 0x01236afa, 0xe181ef85,
    0x3fa5a3b5, 0x2241f88e, 0x708f7169, 0xd09e6189, 0x87938cda, 0x2c311646, 0xc1193528, 0xfb0d78f0,
    0xbe431e0b, 0x8698c3f3, 0xbf455442, 0xb46a3e65, 0x7443dc9e, 0x6758d740, 0x95f065f2, 0x6c079252,
    0x1a279f5e, 0xc218fba7, 0x299c2988, 0x7edbf75d, 0x8d69f100, 0x66b943bd, 0x7d32bfb5, 0xbed1ab8b,
    0xbde7e81a, 0xef5ce9c9, 0xc009834c, 0xc329739d, 0xb65fc422, 0x418a9805, 0x78ea518b, 0x4fd24609,
    0xcecadbd0, 0x2cfd9a42, 0x31c2dbdf, 0x4ea8634f, 0xd24065c7, 0x67d30518, 0xa3d46982, 0x0ba0e72f,
    0x1f7e4327, 0xfb818b66, 0x16d68dc3, 0x73a9b3a6, 0xb5c48a12, 0x2c363b39, 0xc8f80151, 0x4c670ac8,
    0x21f74b2d, 0x9e1771f6, 0x4af15c8e, 0x32f1de67, 0x80f158ce, 0x354a8f48, 0xc859631e, 0x850e682b,
    0x797da0fe, 0x02637c96, 0x4cfffafd, 0x7037ffbb, 0x0e3703b1, 0x4a8d80b8, 0xb38d7dd2, 0x890cc8ca,
    0xd745a7a3, 0xe8a111bc, 0xbe485e3f, 0xf1a42228, 0xbee3f156, 0xe1f26bcf, 0x5d738084, 0xb3310c47,
    0x24bd2140, 0x97d9a702, 0xf0d83258, 0x84a44791, 0xb55097b8, 0xad9793ea, 0xaa618bb9, 0x93338018,
    0xd5da4e2b, 0x0aea4216, 0x294c1890, 0x75b4b236, 0xe6a9e030, 0x413a0515, 0xab2438a9, 0x3680bc58,
    0xed6795e5, 0x5337022a, 0xd26506f5, 0x319ec80a, 0x5eedfeb7, 0x92fd15ee, 0x8e5efe33, 0xda3d2b61,
    0xf0a49db8, 0x5b804830, 0xf22dbe46, 0xe8676279, 0xc2319f7e, 0x4f9aa4a2, 0xb008c8aa, 0x9ca06a13,
    0xb4c93e06, 0xed9c5856, 0x945dce33, 0xe83726ad, 0xbcda8948, 0xda7079ac, 0x5a8e460a, 0xe538d003,
    0x3e251ca9, 0x1ed74e3d, 0xfff30534, 0xf45a21f0, 0xc77e7f70, 0x58dfb475, 0xa4001c03, 0x218deec6,
    0xa27c08f1, 0x20a4da16, 0x3068cac3, 0x9238d903, 0xfa80b2c7, 0x36a7fc1b, 0xd4739760, 0xd87959b4,
    0x8e5d2a06, 0x140c7aed, 0x91e30905, 0xd367960d, 0xc8842d77, 0xa0b49d67, 0xa71e67af, 0x4dc08dd1,
    0x4cf34399, 0x77715f8a, 0xbe4bfcb5, 0x92be0b49, 0xb428ec58, 0xe5d11b53, 0xeacad0b4, 0x4ff6cd5c,
    0x027890a4, 0x42cbdfaf, 0x2feb7dd9, 0x0ac4acf8, 0xfbc4823b, 0x7bced2ef, 0xf137bd0e, 0x38f31456,
    0xa8946755, 0x98e8f6ec, 0xb889f706, 0x4736b111, 0x4e7515c5, 0x4d9c4341, 0xc3e5e6c8, 0x84f61c4b,
    0xaf826cb3, 0x7fc13d7b, 0xc0ce2d53, 0x1b2b8129, 0x9f27e936, 0xcd263849, 0x94319819, 0xc703fc01,
    0x602b5665, 0x2ab6d1ac, 0xf963f92a, 0xe9a8f3b7, 0xcce9094e, 0x7b65d6a4, 0xc0032eaf, 0x16ef64b5,
    0x0e9564de, 0xe5bb66db, 0x0559e6e1, 0xd32c7e26, 0xf045f966, 0x601eb806, 0x27a38fef, 0x22538066,
    0xf66d94ad, 0xf6504903, 0xf539e661, 0x8f44b748, 0x8ccaca6f, 0xa9d4c529, 0x69d8f494, 0xa6f35282,
    0x80fd7082, 0xff91e1c8, 0xd723c439, 0x1f856b97, 0xc7833faa, 0x583b9fde, 0xac623f7a, 0x007385d4,
    0x46a81f9f, 0xa88ea177, 0x54766a3e, 0xffeaee4f, 0x6d8d340d, 0x36cf1ed3, 0xae46245c, 0x88d83be2,
    0xf6ef8b40, 0x85f8b0c8, 0x5dee6097, 0x9c098e11, 0x7debd4bb, 0x74a7fcf1, 0xd3acc652, 0x3de2b2d6,
    0xaa9036e2, 0x81054749, 0x7d3fa4b3, 0x0f91df02, 0x910203a7, 0x91f82d76, 0xe6a8acc1, 0x67d90ff6,
    0x7b35dcb6, 0xda6b9328, 0x795185b8, 0x800b6a10, 0x4117afa3, 0x9627fbf5, 0x7f65fd4e, 0x7c75e88f,
    0x1a8d6594, 0x19adb1af, 0xb507c903, 0xe1a29141, 0x7db6563c, 0x650abe2f, 0x5965b1d1, 0xeca5ce65,
    0xa76a496a, 0x4599f856, 0xf5e7d126, 0xf6403def, 0x31a6ede2, 0x93e882e0, 0xc18cdf76, 0xc83c7f97,
    0x50e07724, 0xcfd1c1da, 0xcc0bdcd6, 0x8e74ef6a, 0x17c3ea6f, 0xa39e9dc5, 0xc877d138, 0x48f53aa8,
    0x93b6bf26, 0x1613cb28, 0xaf88341d, 0x6a462228, 0xb7683719, 0x84c2f702, 0xd9bb0dee, 0x2717d7b5,
    0xa8ecd92e, 0x33d59533, 0x8d91ee36, 0x25b3db15, 0x402f7fd4, 0x79c9a3bd, 0xa311df52, 0x8753f1e2,
    0xbdd12952, 0x56736237, 0x7954dcf2, 0xf4365c0e, 0x6a2ca093, 0x71c39797, 0x580f76da, 0x5ab48d78,
    0x7c450d4a, 0x3fbc3181, 0x3be54a3a, 0xb87194f0, 0xd01badc7, 0x65016aaf, 0xa14f3127, 0x766bf508,
    0x77128006, 0xf0601d77, 0xe4a727c2, 0x0e6240cf, 0x83fef322, 0x51da97f6, 0x630a267b, 0x7300edfd,
    0x66f4f707, 0x41cf0fb0, 0x86574aed, 0x15d2ddae, 0x8098b66b, 0x226d9e55, 0x98e36558, 0x73f41209,
    0x3057e361, 0xdb87aa38, 0x54523860, 0xf8113e53, 0x1e294553, 0x1cce889b, 0x0f799561, 0x7c10940b,
    0x424ffee4, 0x14305de6, 0x6ae75221, 0xa1c0afdf, 0x9faee65f, 0xdc5e2a77, 0x46003118, 0x66034125,
    0x9cd849fd, 0xfcd30622, 0x6b9513eb, 0x0c1a05a4, 0x95c3411f, 0xaa8a283a, 0xc7f8ba21, 0xe251ecb7,
    0x7ce71fb0, 0x04919dca, 0x235dd3c1, 0xa52634c3, 0x964e6130, 0x1487f3b4, 0xa6260a77, 0x97f7bc0c,
    0xe376d0b8, 0x80d648bb, 0xf783e489, 0x02fa6ab6, 0x76bb59f2, 0x91d31e1d, 0x8d174161, 0xe85791b3,
    0x291c546d, 0x21932fae, 0x94373ebc, 0x2f06e627, 0xaf38c56a, 0x9f0d870c, 0xef62e469, 0x9f058cb8,
    0x7057c14e, 0xd6eae00b, 0xb417f2c8, 0xffde5a31, 0xcec2c29b, 0xd5886cca, 0xf5fbc616, 0xdb7474ba,
    0x45f6a05d, 0xc9a074ce, 0xeebf3648, 0xcead83de, 0x7d7cd3f9, 0xfd6c2441, 0xa7e646b0, 0x42e7320f,
    0xcd6293c1, 0x062a44a3, 0x7ee11eb5, 0x3144790a, 0x90d23322, 0x61dc2dea, 0xf49113e1, 0x12bf19e3,
    0x512efc1e, 0x34b6c7ac, 0xeb8335b3, 0xd08e9429, 0x4b79cb53, 0xf47f1b5e, 0xbba9d9df, 0x9a92bef9,
    0x76e9f467, 0xfee9e523, 0xe23a6a2e, 0x3629c629, 0x4136efe1, 0xf95b5dc7, 0x329392ac, 0x6c796b74,
    0x64304d62, 0xa6d15deb, 0xfd7773c8, 0xf6030923, 0xe2f2401c, 0x042f651c, 0x93a927ac, 0x0f02abbc,
    0x8c7f9dcf, 0x43a91c69, 0x9affc32b, 0x9b99ca7b, 0xae5b4e6d, 0xc5cadb0e, 0x963cc52d, 0xf1c00fc4,
    0xc34bec15, 0xb013130e, 0x613b64da, 0x9cb797bb, 0x7d554723, 0x79d37732, 0x29ed8398, 0x361e4e80,
    0xd38358ec, 0x73a0b61b, 0x257b16db, 0x2f690810, 0xabea8f69, 0x9d190f33, 0xcf082fd3, 0xe7afa3de,
    0x11d44147, 0xedc8f349, 0x851ca841, 0x558247f3, 0x7838439c, 0xe8f87bf7, 0xfd8d65d5, 0xda70f0ce,
    0x85585afa, 0x41262baa, 0x6d30fcec, 0x04c498f4, 0x177f6217, 0x1600ae3f, 0xfdd4156f, 0x7671db40,
    0x020c0e9a, 0x010c6ae8, 0xd0cb72ae, 0x663d39ba, 0x567d26bc, 0x7570070a, 0x877f6187, 0xe3b639b9,
    0xf7ab6716, 0x7dff2bd8, 0xd48062c4, 0xa4b4dfbf, 0x5f9ce6db, 0x8a9b5abe, 0x82802b65, 0xa8fc64e5,
    0x30fc73ae, 0x6140f228, 0x488a3c00, 0xdfac852e, 0x7d377473, 0xeec42a83, 0x1fcdd8a8, 0x6d17f03c,
    0x0227377e, 0x7ca96859, 0x7e7f462e, 0xac122f74, 0x4555be75, 0x21af9d5f, 0xb0ac9a62, 0x7e697e25,
];

// In non-hw format
const VENDOR_MLDSA_KEY_1_PUBLIC: [u32; 648] = [
    0xe5e3f445, 0xa7952561, 0x4cf28a96, 0x523f5b7d, 0xfe24361b, 0xf92e16e7, 0x8a8a5cbd, 0x4510d3c0,
    0x1dfcd6b9, 0xdf8a48eb, 0x66a526a7, 0x362fe903, 0x6b80a350, 0xa5feb244, 0x9d2d3a44, 0x03b3e7de,
    0x15435a77, 0x200c8eb3, 0x340c3a0c, 0x86aad01e, 0x78b7d7ae, 0xae4d5113, 0xbb1efa20, 0xf71c1156,
    0xcd24245c, 0x49dda897, 0x9fe63875, 0x8ba814db, 0x42da242f, 0x292129e0, 0xc2f1efa7, 0x699ff579,
    0x6d0a24a6, 0x574bdde7, 0x4e0ea38e, 0xb789ff20, 0xf63fd22b, 0x77e74678, 0x0b97ccab, 0x60901466,
    0x7b637378, 0xfd11241c, 0x1f80ac8a, 0x4e47b700, 0x7ae6f9c9, 0x7d6ceda1, 0x6178008b, 0x571ab02a,
    0x4f8620dc, 0xe41a26df, 0x24bfd0e0, 0xbddab57e, 0x80cfb9a6, 0xb61d80bd, 0x88ae6e4c, 0x0d3b8338,
    0x6f82e2ad, 0x1109c1aa, 0xdfff914d, 0x3149239b, 0xef304a44, 0x34c67ccb, 0x30d5117c, 0x56e7a6d5,
    0xdc38c569, 0x6b045229, 0x0b488764, 0xc710a3c1, 0x399f9259, 0xcd3dee64, 0x13a38a1b, 0xe8b94abb,
    0x06a997fc, 0xba79e70a, 0xc858d9af, 0x0dd18634, 0xe044c8f6, 0x4b41614c, 0xb3cc5e0f, 0x55546977,
    0x717feb18, 0x15c248da, 0x7da430bd, 0xaaba9d18, 0xad5494b8, 0x8636e9a3, 0x8941788e, 0xec90bd96,
    0xd1d02d4e, 0xb32539f4, 0xec94d76e, 0x3e156167, 0xde00dd06, 0x899ddaf6, 0x1f89a3c9, 0xf3b06cde,
    0x864cf9c4, 0x3f905787, 0x8cc490dd, 0xc9459c40, 0xf4dd31c9, 0x9c542e20, 0xbff30ebf, 0xe8b961dc,
    0xb5c62101, 0x3b6c4af3, 0xeaf47d9e, 0xd1cbab54, 0x9fcb553c, 0x97cacdf3, 0x8c090eac, 0x267c189a,
    0x592e0137, 0xa1abf2d9, 0xf6a3d0b1, 0x623b7638, 0x5ac4fa75, 0xbc5a3bfe, 0x8aa9eca0, 0xb3407048,
    0x07f3be89, 0xc5a6eea4, 0xecff9f0b, 0x3e33e072, 0x3b12ab80, 0x19b9508f, 0x4df2aa64, 0x1d067e80,
    0xda2590b1, 0x662b2430, 0x54af3464, 0x8a3b347d, 0xe305d3bc, 0x7bc39fdb, 0x524074a2, 0x731f07de,
    0x6b9367d6, 0x55f47379, 0xae4dabaa, 0x68327b93, 0xdc18e50c, 0x1507c672, 0x29de1d59, 0x9ffcfe25,
    0x78d2433e, 0x71652d45, 0x72cb9dd7, 0x9867a64b, 0x3e3deda7, 0x8668cb7b, 0x868b94b7, 0x5f81fcb0,
    0x765b8e20, 0x0464feb4, 0xc88d93d8, 0x4deb877f, 0x09ce6a04, 0xf6a1e55b, 0x9ec23a7f, 0x00f1f4fa,
    0xca5917f8, 0x5d66dd6e, 0x23308fcf, 0x51d3d695, 0x92050763, 0xf7b0415d, 0xd51feb58, 0x1a418949,
    0x3721f4fa, 0x6b2aade4, 0x01436f86, 0xe3fa7aea, 0xfe0060e1, 0x6442e0ff, 0x6a98f684, 0x05f931de,
    0x7e400033, 0x0811231a, 0x208f89bb, 0x85d27717, 0x7439f70d, 0xae74c63d, 0x9eec60cf, 0x2d238ecc,
    0x97547c4b, 0x1372c33f, 0x2e48c0b0, 0x8cc857c5, 0xf8c82ccf, 0x57b995c2, 0xf97091e9, 0x5c5bebc2,
    0xc2008e89, 0xd9aeafc9, 0xb1a95170, 0x2058a5a5, 0xd8e51d4c, 0x17764956, 0x150a8fb6, 0x39065bfb,
    0x04bbdcbe, 0xab355370, 0x5c726126, 0x629a08d4, 0x36f7b4ea, 0x300f9d1d, 0xe0863581, 0x861189fa,
    0x98e68259, 0x5047cbaa, 0xe8567689, 0x56a7370a, 0xcfdc220b, 0xe694162b, 0x9be7f3f5, 0x9758204e,
    0x2f10d5c1, 0x0c23637b, 0xac50ab77, 0x33a8185a, 0x74d75a88, 0x73dd6751, 0x96658d1a, 0x80c1580b,
    0xcb63f52a, 0xf618192a, 0x8457de0c, 0x27260d99, 0x5e3e8359, 0xce2a8556, 0x5bb56dbb, 0x40f07c60,
    0x416375f8, 0x49e640dd, 0x17c76c86, 0xed7039dd, 0x7c072d2f, 0x9c51c15d, 0x7b4b9e5a, 0xd9ffa3cb,
    0xdac4cf90, 0xf1412006, 0x37b9a6b7, 0x6ec3589d, 0x14d5c1c2, 0xaae17464, 0x90093326, 0x373d8e10,
    0xb0ca6d53, 0x1738b8a3, 0x9edb7ab2, 0xb562c192, 0xac7f4634, 0xa584b7e9, 0x3dad9819, 0x646b1833,
    0x57ea88d4, 0x10b62d11, 0xf4a661e0, 0x09a26a14, 0xbee17027, 0x16416378, 0xf8892111, 0x312ea803,
    0xbbd3968b, 0x52514849, 0x8b6213eb, 0xd5183051, 0xd0f132bc, 0x392de436, 0x48692b76, 0x9c9f3a3c,
    0x4da99a3f, 0xc5193fe2, 0x0cdc58fb, 0x69d6ac5e, 0x82b4fc69, 0x10b78ad6, 0x493c41d3, 0xffef190a,
    0x82674472, 0x9d02423a, 0x38656270, 0x68188069, 0xd84fa88a, 0x5b892143, 0xef65d366, 0x0ed0a8ff,
    0x75384d91, 0x4ef3f5ef, 0x431325cc, 0xefc4c07d, 0xa8bcbce6, 0x0344fc80, 0x1c9a2ece, 0xe9639340,
    0xa64e22fb, 0x6863378c, 0xa3c2f897, 0x9d95bd69, 0x009b3bb5, 0x9b54d71c, 0x15cf69b2, 0xfcce8f3e,
    0xee80a0cc, 0x44abd4d3, 0xf48c796c, 0x1467f411, 0x5372545e, 0xbcd9b437, 0xe335e439, 0x12d8150d,
    0x6f2869a8, 0x81e1050a, 0xbe6bd2c9, 0xcc83a799, 0x3a1296a5, 0x76e8ee63, 0xb594a40d, 0x6d7d2746,
    0x3d4b3215, 0xf7d051fe, 0xc2b45693, 0xfeaafb86, 0x54aa938a, 0xcbe81d77, 0x5d179824, 0xb888e5f3,
    0xea75c392, 0x47e03f62, 0xd035e550, 0xb89a5f15, 0x2af21dd7, 0x7f9ff009, 0x4bba4cee, 0x8e8e847e,
    0x3d2d9e87, 0x68e6bf13, 0x908bb2fc, 0x3d07d079, 0x97363d8e, 0x95bc7e70, 0xc7902578, 0xa83800e7,
    0x7ccc1c6e, 0xcc3cd61d, 0x9b87d284, 0x8b12a13d, 0x24649ad4, 0x4f0c58de, 0x3b6b97c0, 0x62f042b4,
    0x11ceaed5, 0x9a5d083f, 0x333390a9, 0x4f790de1, 0xf65ce1a2, 0x35ee7769, 0x6d56a789, 0x055667c2,
    0x8e4d89fa, 0x8eb78036, 0xd6672bd7, 0xa7cd2eca, 0xe77c1be6, 0x798c0cef, 0x892afabe, 0xb8717c18,
    0x86ecaed0, 0x57274121, 0x292d69c4, 0xbd63a503, 0x3e9c1fb1, 0x45bfeb0b, 0xcaf58767, 0x363b3caa,
    0x6bea05bd, 0x4c468103, 0x53794172, 0x832b054e, 0x4495f9d1, 0xa122b321, 0x1c6981cc, 0x413317ea,
    0xa0a26e6f, 0x78cad533, 0x6fc0ef3b, 0x5e8aeaef, 0x142baa36, 0x1ad08b16, 0x94eb262b, 0x22d65335,
    0xaeb2e4e5, 0x3574b8ff, 0x75d3017b, 0xf850bebd, 0xfdf46da4, 0x6da3b7ff, 0xa696de07, 0x641fe1b9,
    0x9e8700e9, 0xb2cd7c95, 0xed2c4533, 0x448d6c22, 0x1118a8a1, 0xceb84fb0, 0xfaf5ac9a, 0x4636d134,
    0x895cad33, 0xd832e113, 0x3805f418, 0x02db6f89, 0xbb281b76, 0x844d0a7d, 0x50e2f03b, 0x247be9c2,
    0x110a0ded, 0x4a21eb60, 0xf9ec1cc6, 0xd7387871, 0x98c2a448, 0xba114ff8, 0x69de46ab, 0xe65c3cbd,
    0x6f9034db, 0x3b76d1f7, 0xf54ffa9b, 0x31522c85, 0x78944599, 0xd7a39142, 0x38c6dbeb, 0x3bbc3f9e,
    0x21ceb258, 0x09e4cbd9, 0x2cff2e6b, 0x7699f502, 0xc73d8cb1, 0x59b38cc3, 0x605bf256, 0x1ddf8439,
    0x991c12b1, 0x08c31e6c, 0x8d1213fe, 0x2375b0f3, 0xecbdffa7, 0xce7e3e69, 0x5fb44cb3, 0x9d1532e1,
    0xd098702f, 0xd7e283a0, 0x8fec7371, 0xfd5b0011, 0x331982b8, 0xc411e3ea, 0x27b002b9, 0xe6074a91,
    0x28d05974, 0x42e8613d, 0xe75a4cd8, 0x3e22c879, 0x15a6895a, 0xfee1c7a0, 0x3863a786, 0x15255e6b,
    0xa501577a, 0xe220aa25, 0x2b7e1774, 0x106a1825, 0x6dcfa8eb, 0xa8c8fce2, 0xb7b9cce9, 0x1239b6c7,
    0x2711104a, 0x635f2614, 0x780b474b, 0xcad114aa, 0x8ba233db, 0x3edb8b49, 0x6ec9380a, 0x63d23d92,
    0x39d4aefb, 0x2c207913, 0x2412d142, 0x1e16de41, 0x7f1ee8db, 0x536b21ee, 0x87b5d010, 0x71386ee9,
    0xfc2d9af1, 0x3be5f8e7, 0x5b0a60c8, 0x72119b0f, 0xc4a9c0fe, 0xd5391261, 0x0d2a5abe, 0x75773b40,
    0xc230e0a7, 0x26409e4c, 0xdd1c152d, 0x89c093be, 0x6a2d1ea1, 0x093d1286, 0xa3558fc5, 0xc2efd365,
    0xd0551a62, 0x27d1e90a, 0xde0144a0, 0xa8b55a5d, 0xb01e55f1, 0x997549a6, 0xe01a4e6a, 0x5c55bdd9,
    0x43d28a60, 0x1e74ac17, 0x9d9ce431, 0x0910be2f, 0xdad0eeb5, 0xba1de388, 0x3f840fbf, 0x1724dda9,
    0xcc0926cb, 0x66ba71fc, 0x7b8b9c7f, 0xc87e0fb6, 0x126c143b, 0x17f752f6, 0x674f414e, 0xc705c9fe,
    0x3ced955c, 0x2f77a2b6, 0x685db08a, 0x98bced45, 0x85bd7dc3, 0x1a40d0fc, 0xba0ec946, 0xa8f3d128,
    0x69645f86, 0x81282670, 0x8cdb4a64, 0x0a2d0769, 0x34443bbf, 0x092d80ba, 0x13c634ee, 0x9964e0b0,
    0x894de1a8, 0x81d5ce35, 0x56c76097, 0xcb9c0cf8, 0x5af2b530, 0x40a82d5c, 0xcf71eb67, 0x6e8236ed,
    0xbbd00041, 0x7469d9ab, 0xaf68afba, 0x40e7492e, 0xf11c2219, 0x19826150, 0xd90d0985, 0xc9373de3,
    0x00c3918a, 0x1e670c24, 0x2daada44, 0xd920751d, 0x028e0b91, 0xcf282b3f, 0x210f837c, 0xbe87623f,
    0xeca7c312, 0x7ac66303, 0x4caf595e, 0xc80581b0, 0x7b84462b, 0x9e51c6e9, 0x33c8894b, 0x9e8844ea,
    0xc1211ae3, 0x9ad9841b, 0xce79ec1a, 0xbe8c42a4, 0x38e69b80, 0xe9917796, 0x34f707b6, 0x62435e5d,
    0xe5a24bac, 0xbae70fd3, 0x82b45877, 0xda621c25, 0xdf3eb895, 0x6f7c60fd, 0x09741c99, 0x0166dde8,
    0x8090209e, 0xcc99e9e5, 0x692367d1, 0xe312d1a5, 0x6a39150c, 0x1ca0f4ef, 0xe657622c, 0x978fc205,
    0xaebdd194, 0x8efa33e5, 0x66e8289d, 0xea229b66, 0x4310ca10, 0x09b19014, 0x82ce9428, 0xe62237bc,
    0xf2cf6f0b, 0x76a22c98, 0x90899999, 0x448b61e4, 0x59d77524, 0x1ecf0d4b, 0x4bc1a74f, 0x89f642dc,
    0x151b827a, 0xb9cb6cb5, 0x3914fcb0, 0x8a33fec4, 0x226bf663, 0x5864fd97, 0x96bed59d, 0x005799ee,
    0x8fb67b90, 0x46dd7ce8, 0x008d8f88, 0x0fed0c97, 0x0c8f3476, 0x46e4576f, 0x56b5757d, 0xda7130ff,
    0xfdcc230d, 0x2cddbe5f, 0xd24c027b, 0x7f969011, 0x5b76e93e, 0xaf6f1ea5, 0xd7b2bae7, 0xa164c74b,
    0x0e9c9e3f, 0x2917c5da, 0x243822b7, 0x1d25bcb0, 0x47548736, 0xdd221be5, 0x551b0eb3, 0xf6d6c778,
];

// In non-hw format
const VENDOR_SIGNATURE: [u32; 1157] = [
    0x931a888f, 0xea324661, 0xaf914835, 0xf40334d3, 0x8821b94e, 0x178360dd, 0xeb3da9c2, 0x1f4cfbde,
    0x40b6ebd5, 0x97c317a6, 0x4ddefc93, 0x2d02c505, 0x8692d7e9, 0xeb91e68b, 0x67e0265d, 0xf5113224,
    0xe4fc6444, 0x3a8bb07a, 0x40a427e2, 0x20aa0deb, 0xa425e471, 0xe6be1095, 0x97192e69, 0x21fd5422,
    0x48b971c2, 0xb5f0db05, 0xa60e7f1c, 0x6bb3066d, 0x16b94043, 0x4b4aa65c, 0x691a9449, 0x2d4b0875,
    0xad6efe26, 0x492e2b7b, 0xa89ac4d4, 0xc40003de, 0x45b3d4df, 0x83461a18, 0x15683d13, 0x8f2c7c6c,
    0x48aa56f9, 0x13d4dfcb, 0x43a19fa7, 0x157f5cd5, 0x1af15f58, 0x8c77c035, 0x567da33c, 0xaf07bc0a,
    0x46072d6f, 0xa2ef6b8a, 0x169747e3, 0x8fea6d8c, 0x19659f06, 0x97e6246e, 0x96fc1870, 0x05099ac8,
    0x588be1cb, 0xbca8e14a, 0x8610042a, 0x52147236, 0x2c1d9325, 0x829bc970, 0x166c174b, 0xc29cda94,
    0x5c3c0ca8, 0xa1b70bc4, 0xd849eddf, 0x9eaae88d, 0x72f069fe, 0x452fc224, 0x79872f83, 0xa294bbec,
    0x4c2b017d, 0x81a82e45, 0xb5427964, 0x731c2c06, 0x0b08923a, 0x34079e93, 0x39106c9a, 0x8bb951bf,
    0xb07faf35, 0xc5df7278, 0xad65f42f, 0xc9d19e50, 0x3d5d27e5, 0xfe62f82d, 0x4f25aa06, 0x92e64871,
    0xc03be023, 0xc27dd389, 0x2faca18f, 0x1ac5b99a, 0xc53440b5, 0x2b69133b, 0x84a607a9, 0xac72e52e,
    0x3cbe791d, 0x5137c41d, 0x0da2309f, 0x5834c3b8, 0x113e362f, 0x966cbe43, 0xdf0ce3aa, 0x0c5c5794,
    0x90bed84f, 0xe8e8b0da, 0x9fdd35c4, 0x676e07ee, 0xcd42ca11, 0x8b9c0e01, 0xed772cb5, 0x564e61e7,
    0xa3ad14ff, 0xba2dc982, 0x3306fb07, 0x340c8de7, 0xcb7d6462, 0xa6d8cc39, 0x6dd731f6, 0x72e518e8,
    0x2e64dd16, 0x37732e8a, 0xc7b96b51, 0x179f533f, 0x06280e06, 0x5c1a485c, 0xb65e75fa, 0x2c63ee38,
    0x51dc9ea3, 0xfc038e34, 0x847093bf, 0x17555164, 0x72ce0897, 0x7f1755e0, 0xd65adf24, 0x1dbdc045,
    0xff300fd4, 0xeac13a28, 0xe5730d55, 0x3d498c3d, 0x2ceb2209, 0x5568be6b, 0x372d6f7e, 0xca78853f,
    0xc3b2ae02, 0x69dbf008, 0xbe353e1b, 0xe240fc2d, 0x56ecf048, 0xe37e7ba5, 0x9d77d024, 0x0bb0441e,
    0xf1d3cec7, 0x97fc6c42, 0x450543af, 0xcd65a646, 0x9c2ae0db, 0xd4ac4343, 0x50ba2d0a, 0xdb8db162,
    0x5ea8aeb0, 0xa589d096, 0x9400249d, 0x096a2c45, 0x67fc4a82, 0x37c6f17d, 0x9e66ce6f, 0x11034c92,
    0xcf8374c7, 0x0d5d6e9d, 0x1850330e, 0x38b162ca, 0x53835f79, 0xfb6e4e1b, 0xfc7e7033, 0x1d4fb472,
    0xe1f65f6a, 0xb5dd5ddb, 0x88b064d0, 0x66a75e48, 0xd3790dfb, 0x4e0d071b, 0xf3e9e6f8, 0x71c45915,
    0xec8a8c01, 0xf49df7e4, 0xae123ddf, 0x782d8a1c, 0xe895cd2a, 0x0583d4aa, 0xfd9e998f, 0xf9c8668e,
    0x266d83a4, 0xa5e891c6, 0x24fbe680, 0xc0ec85f9, 0x3940519a, 0xde0634d8, 0xbfd066b7, 0x738b62cf,
    0xb95be732, 0x63295bbb, 0x7341bd1e, 0xbecf9c46, 0x3672d47c, 0x86477667, 0x5ad3c542, 0x120b0333,
    0xa5a2ed9e, 0xae5728a5, 0x02c5f0e3, 0x9d3bdab2, 0xf312d685, 0x62faa7e6, 0xb7f6cb9a, 0x7c9c8fa6,
    0x1568c3ec, 0x9884bf0e, 0x153a8d08, 0x1a7577f2, 0xe659d21c, 0xc612ec19, 0xda809df1, 0x1469fefd,
    0x350f8583, 0xa2b6ddbd, 0xe2297f9b, 0xad8f88ae, 0xa03613d3, 0xe44bb7d5, 0x087a1ee5, 0x716f9579,
    0x6a701b9c, 0xcd8b26c5, 0xa58c7ad7, 0x650ea330, 0xa8c7c859, 0x858ed70b, 0x5c434566, 0x0b86b5b2,
    0x11e711dc, 0x06971ba5, 0xa6c4bc19, 0x9d076906, 0x7ae007bc, 0xb891564e, 0xf55c1a50, 0x45aceab9,
    0x6d871f3e, 0xc4f858a7, 0x95615762, 0x1022fbca, 0x72d292f0, 0x14b9bddd, 0x3eefb0dd, 0x1c3d93e1,
    0x59c28740, 0x19d2f8dd, 0x4755ddca, 0xa87dfca4, 0x782100fa, 0xe8400ae2, 0xbe0c0f2a, 0x4e86f8e4,
    0x0abaf2a1, 0x64153791, 0x8a03e2e7, 0xb580a2c4, 0x69046afc, 0x9e4a2e45, 0x7186abf0, 0x39c7c728,
    0xcf2fd30c, 0xb53550bf, 0x480fbeb4, 0xa2db541c, 0x066d056d, 0x434d0f72, 0x59e203dc, 0xf70febac,
    0x3e30eec2, 0x4bec2a8e, 0xa6460dd0, 0x3b0f2eb1, 0xb0d3d5ea, 0xa0428969, 0x908b9e0d, 0xd6941709,
    0xc44a39e9, 0x0b7583a1, 0xb4f7a333, 0xf500af1c, 0xc3566a39, 0x85ec1c85, 0xb45cea86, 0x795e773b,
    0xcac7cb1b, 0xe8ac8c10, 0x894c589d, 0x410e9c0a, 0x7c96fe80, 0xd8d39f3b, 0x52551b0c, 0x8b112821,
    0x0caa5a81, 0xc69a4549, 0x7aaaf292, 0x4936585f, 0xbdcb460e, 0xf942077b, 0x320eb60a, 0x0b698b6b,
    0xaca575b1, 0x683aa426, 0x65068eb5, 0xa15dc182, 0xcb5b3ef0, 0x15fc4eac, 0x5461fa7c, 0x030d58e0,
    0xd133d7f1, 0xbda540e6, 0x7959ecdc, 0x4d575e1d, 0x633cf1b0, 0x7027922e, 0x09f211a3, 0xe34743c9,
    0xf98ff698, 0xa5e7a417, 0x320db4fc, 0xf68826f7, 0x9fe738e7, 0xbf776204, 0x85a1bf3c, 0x3c32c909,
    0x52603675, 0x3db8a65e, 0x5e62dec6, 0xea7a3e84, 0xdf90b2da, 0x37cf4f82, 0xb587fd04, 0x0de436f8,
    0xaf3d84b0, 0x4c0365e7, 0x552f50e0, 0xc3b5ef1b, 0xa0f8842e, 0x35717894, 0x14c31602, 0x4b509cf7,
    0x14c56b78, 0xd3477c7e, 0xb48f2362, 0x508f8954, 0x5990c167, 0x3bfca990, 0x79b51403, 0xd216b8c2,
    0xf10f595d, 0x26bed432, 0x14808d0f, 0xf95c706e, 0x4b0e79b5, 0x0b2ce156, 0xddfc840f, 0x46ce876e,
    0x164315ef, 0x5176e721, 0xe729d0ef, 0xb0936294, 0xfcfc06a5, 0x17dee57f, 0xef011da7, 0xe17925a4,
    0xb24c809f, 0xc15490b6, 0xebdf43b7, 0xb93f6b54, 0x00c4e146, 0x69066646, 0x8939899b, 0x738a4b07,
    0x42cea740, 0x06879bb1, 0x0de1a767, 0xc37c34bf, 0x075477d6, 0x8f2043d4, 0x8740e20d, 0xdc90a199,
    0x3cf2f8f3, 0xb738b1f7, 0x0333ef2d, 0x881bd667, 0xe3972ef9, 0x89d851f7, 0x4cc77e6d, 0xdb3dfc09,
    0xbc0b83f8, 0x880f6cb8, 0xc01ca64d, 0xc80a7f02, 0xc80ba7a2, 0xec6db771, 0x8cb2eab4, 0x893edef3,
    0x2a5aca99, 0x335d7b9d, 0x360dfec6, 0x348720f6, 0x02188238, 0x254d2642, 0x8be15fb2, 0x3fb2e907,
    0x60521a02, 0x7d80915c, 0xe6c769f1, 0x0823431b, 0x7623d01e, 0x3f73ec12, 0x46c7511f, 0xe5809a51,
    0x7742d3e3, 0x74b4e381, 0x65045cb7, 0x3e612871, 0xb7251349, 0x04275875, 0xc1abc60b, 0x38e09c74,
    0x646c959a, 0xe69b0c26, 0x18badb15, 0x00f8d0ed, 0xbcd7710c, 0x34f7f98c, 0xa22ff215, 0x624a65ad,
    0x722c89c1, 0x99a59ed2, 0xb70629b7, 0x6b554ba8, 0x82b5424f, 0xb4c732c7, 0xc417f45e, 0xd8179eab,
    0x8ea0b130, 0x2f23a5f6, 0x0adfcb98, 0x353965d9, 0x26c0378b, 0x6d4f778f, 0xfa96979d, 0x07af5c23,
    0x98a4612c, 0xe06c7c7b, 0x868684af, 0xe33172d3, 0x319b6e58, 0x3cfe87c3, 0xe9b9b9e0, 0x2e18451b,
    0x2eb472a9, 0x6e061f38, 0xbf4756af, 0x3f9a91e3, 0xf2cf1e15, 0xc507b53e, 0x04a798d2, 0x9de24494,
    0x7d8ab7e1, 0x74ab38dc, 0xf9318d3c, 0x2119429c, 0xd5d678c6, 0xb9a184b2, 0x4cf5c503, 0x3a9e6bda,
    0x18c4121b, 0xbd834909, 0xc023b953, 0x0559efb0, 0xf0c71550, 0xf7349eb0, 0x7737fbec, 0xab8f37d6,
    0x98a018c0, 0x17b3aa00, 0x3b4c7bd8, 0x8fc2f044, 0x43fd59ad, 0xf97d89bb, 0xe59fc888, 0xa77f1c41,
    0xb74b7bf6, 0x81973031, 0xe207aaa0, 0x925ab0d7, 0x54dec9be, 0x3db3ad35, 0x2470b648, 0x4c82360e,
    0x0083150f, 0x79ef0065, 0x6a40d2da, 0x5d4a44c0, 0x8854e8c7, 0x753a72e0, 0xd78a5583, 0x63705359,
    0xcf117c24, 0x3ee3047f, 0x725094dd, 0x08c58451, 0xeaed581b, 0x9b376680, 0x9014e497, 0x4fb0dc54,
    0xcfa17c3e, 0x3ded3928, 0xe47d8c26, 0x4a3d2b38, 0x73ad8603, 0x102f750c, 0x94c3e57f, 0x78d24cb8,
    0x6952cc5c, 0x905f9e3f, 0xcbb866c7, 0xafa17a85, 0x5c5424a7, 0x1fce8d1f, 0x5337e1b2, 0x3700855b,
    0xe9ff5c01, 0x1d972319, 0xd0c96ae1, 0x1b511abf, 0x89295593, 0x5fefdff2, 0x473b9758, 0x9f64a90f,
    0xb67f7954, 0xa3fd3bff, 0xd6f1dc57, 0xb509f76b, 0xad1da5b9, 0x1e996062, 0x1c636ccd, 0xa1d0a321,
    0xab6cdf77, 0x3d2a7a2a, 0x6b6d25f5, 0x424bd72c, 0xe20a7895, 0x9255b7c3, 0xd866aeb8, 0xb898db2c,
    0x406a4910, 0xcba5e14d, 0x840013a8, 0x691d8d62, 0xb05c459b, 0xe5e54174, 0xcefc0d41, 0xa8bfda1a,
    0x7ae526dc, 0x697bd02a, 0x7c8bb048, 0x69a258c0, 0x3af27ef0, 0x579c7ba7, 0x0ea3d80d, 0xb3af92c3,
    0x9b3395be, 0xfc525f42, 0x146aa1cb, 0x73d05a17, 0xbf5aee20, 0x2d08f5e7, 0x10efb48f, 0x870760bb,
    0x4b6f4ad0, 0xf7422600, 0x3c442756, 0x5db8f067, 0x8edc863c, 0xa87f1240, 0x48c13331, 0xa5345e59,
    0x8ddc6b7c, 0x8f6c6aa3, 0x6b49de14, 0xb51b784a, 0x3bd3ce01, 0xd4337698, 0xd79236ba, 0x03d77ec4,
    0xec339e13, 0xa0b02026, 0xd6cbcfad, 0x003abfc7, 0x0e3e412b, 0x36237cfe, 0x6ed4e19c, 0x77985a4c,
    0x66a7cfd4, 0xa8ac52b7, 0x390fae49, 0x80009d2d, 0x584422de, 0x705ea37e, 0x3bc97dd0, 0x09da5a13,
    0x922ead9b, 0x001a8b14, 0x2c69b858, 0x0320b338, 0xdf49f4bd, 0xf9aa0f46, 0x12cab784, 0x19265714,
    0x2c50b65a, 0x0e84e945, 0xa8f9c601, 0xfbde3f31, 0x043f5b33, 0x86c0422a, 0x76d78161, 0x93357b35,
    0x7007ce1c, 0x6e8e353a, 0x954a608e, 0x33445881, 0xba16d214, 0x4e975903, 0x3dc98392, 0xfcf548bb,
    0x21a9d95b, 0x509056cd, 0x4d0b51fb, 0xe1a93052, 0x43879b00, 0x3906254b, 0xc15292ad, 0xbda673aa,
    0x68f7c458, 0x3c137d4f, 0xc5644cb5, 0xdbbf6d7a, 0xad89221d, 0xf231b6f0, 0xc435b804, 0x8b0f2731,
    0x0b90c949, 0x29109e36, 0x49a605f3, 0x2beb40dd, 0x1aa370f5, 0x2828837c, 0x1bf1b551, 0xa4e96d50,
    0xfa8a06cf, 0xdd2761c2, 0x503ad89a, 0xf9f0084d, 0xdfd3dcb6, 0x74aa7d69, 0x3f330fb9, 0x27b7e501,
    0xd0426689, 0x784b836d, 0x65a9bb51, 0xda0451e6, 0x53a5d970, 0x8655506f, 0x1f973b61, 0x128c1afb,
    0x1405e48d, 0x9ff21154, 0x10e957ad, 0x678c24dc, 0x954c5426, 0xa3dc80a9, 0xac1338cc, 0xb345871d,
    0x061575d1, 0x303c70ff, 0x80b375b1, 0xa4f6caa1, 0xf34dd8c5, 0xcbe51515, 0x8af5e352, 0x21c85107,
    0x0a4ee1b5, 0x91579b66, 0xe309c723, 0x7bd8f322, 0xaac544c4, 0x49b2e6f2, 0x4b1c1cdb, 0x8a486390,
    0x29cd3e0e, 0x5f231ff4, 0x0e8d54ae, 0x25875237, 0x803aaa55, 0x551a7352, 0x2e11d101, 0xaa12ad44,
    0xa2006451, 0x7cfa3582, 0x4049e2c9, 0x6c36a089, 0x295623fb, 0x2ca7793c, 0x0d96717a, 0x9000684d,
    0x7a252916, 0x29042e81, 0xe6f0de63, 0x9cd9f0bd, 0x1cdb5659, 0xac9226b5, 0xf287e67a, 0xb788f29f,
    0xd6fcb9d7, 0x1441c55f, 0x788b1082, 0x9e8a53b4, 0xd3ca8120, 0x8700dead, 0xdb9ddf9d, 0xf2de6558,
    0x01132646, 0x4d5cbc36, 0x0e162635, 0x3e65ede5, 0xcc5c077a, 0x0deee313, 0x9759f8be, 0xecf4dbbe,
    0xdbaa92c4, 0x4285f90b, 0x1ab7a0c8, 0x103cef7e, 0x1a5227d3, 0x19191f4e, 0x2c21738e, 0x0165dc1a,
    0x95d2dc6b, 0xdb750859, 0xb9cd3811, 0xf05e2ba5, 0xff44c427, 0x1cb41fb1, 0xd6acfef3, 0x81c560d8,
    0xd35d0ec1, 0x63073346, 0xd1dd8e58, 0xa6b71822, 0xd8a1fa29, 0xba1a5fe1, 0x29e2cb8a, 0x868116db,
    0x0a28c827, 0x71daf8bd, 0xc9e84587, 0x1d13586b, 0xff7ae09d, 0x4f362b36, 0x19f9dc8d, 0xcf20f9f6,
    0x739ec3c5, 0x3cf08a65, 0xb1524cec, 0x1424037c, 0x3167a1a3, 0xc908fc88, 0x1dc565b0, 0x398985e6,
    0x2611c070, 0x7e2d4500, 0xcb58b3b6, 0xf3036d61, 0x3203aff9, 0x162a0c5a, 0xca17e030, 0x6830c2cb,
    0x3ab2b0e3, 0xd9f28944, 0x9b501a28, 0xdba7f4ba, 0xee0b559c, 0x5ca15ab4, 0x3c3219ab, 0x22b3264e,
    0x51fa5c80, 0x88b72288, 0x020978e4, 0x45e02ae8, 0x3a25cb42, 0x4f33b85f, 0x2dd04309, 0x8bbb03eb,
    0x19d11973, 0xc90e5cd1, 0xd876b728, 0x9a2a8476, 0x67304b00, 0x233cb3db, 0xe2cb4ed3, 0xed565d17,
    0x60ace8f0, 0x16ee8135, 0x4be8407a, 0x973683c9, 0x65eaa099, 0xd63986dc, 0x0f35c517, 0x8bbacdd4,
    0x6214b95c, 0x058b0ea8, 0x99b62414, 0xc39a4a26, 0xb895c1d8, 0x5761fe87, 0x77738515, 0x0bb72d51,
    0x18a8ad4e, 0x8510a016, 0x536b2664, 0xe10e84ec, 0xd3add20b, 0x1f040878, 0xc6e4740f, 0xaaa3c746,
    0x17ca4bd3, 0x371d1567, 0x4c8872c3, 0x5f41019b, 0x18314637, 0xc779445a, 0x61b68895, 0xebd09bf3,
    0x32380f88, 0xe0dbe669, 0x5bd881a2, 0x077847c7, 0xf8b5667c, 0xfd708ac9, 0x1194c66b, 0x71af96df,
    0xcd9b6ee1, 0xbe6edd5a, 0x0859e2be, 0xe5462755, 0xa899615f, 0x7ff014eb, 0xf437b536, 0xc1e0cce6,
    0x7804283e, 0x29dd3cfa, 0x2864f273, 0xc08fe677, 0x3499da17, 0x63f009d7, 0xa9a5b900, 0xe3963af4,
    0xdd3014d0, 0x6d0f056f, 0x65ec85a0, 0xa57368c9, 0x9afa8c41, 0x4863174b, 0xe422a424, 0x4b87b2a6,
    0x89d5fbb2, 0x5830694f, 0x562e1c4a, 0x25e32063, 0x5ea13549, 0x942523d8, 0x880f5299, 0x445661e2,
    0xa379137f, 0x9b05ba36, 0x5003a489, 0x2a409746, 0x6a738295, 0x3a9cca05, 0x64ab32f0, 0xcfe893a9,
    0xc40fd04d, 0x86530957, 0x261f2ac5, 0xa6e39f39, 0xa6820177, 0xf47d84e6, 0x3df32e50, 0x9c3b31d1,
    0x12893671, 0x09b109fc, 0x19d1581a, 0x5588d353, 0xa0d4b8ec, 0x518f6789, 0xf09b782f, 0xc0db06a7,
    0x2496c97a, 0xa9433ea3, 0xa350ac95, 0x45d42d48, 0xbe1f244d, 0xdbb8968e, 0x7c901d1d, 0x7cba6566,
    0xc7312486, 0x0cbdcdb8, 0xb57df384, 0xed65a38a, 0x7731baed, 0xc2a9284c, 0xb7b324b9, 0xe729c90a,
    0xaa21af18, 0x3d5b01da, 0x402a6264, 0x5828c01e, 0x2c639768, 0x830fef11, 0x22861152, 0x069807e5,
    0x6b905b26, 0x0f9ed2ce, 0x511eab1d, 0x065424a6, 0xcfaa909d, 0x48f65fe2, 0x5f1a16a3, 0x2af8ab2e,
    0xf860470e, 0x9976c968, 0xc3ce5964, 0x278b9c0b, 0x1717a298, 0xdc6ba264, 0xcc5aecae, 0xa3691c1f,
    0xe3eb4b2c, 0x9976f1f0, 0x162d60ad, 0x8e44ef26, 0x83e0cf52, 0x84f1f196, 0x114aeccc, 0x19a141c7,
    0x437ec25c, 0xb76618cb, 0x6e9bbe97, 0x3e5da3bb, 0xfb445079, 0xba83fdbc, 0x923e6d7f, 0x50a3d10d,
    0xc9eec96a, 0xd5c1d779, 0xcdf163cd, 0x50cc8d42, 0x1c87fd67, 0xdbc69759, 0x171897a5, 0xc01220a6,
    0x7f36bd31, 0x5f881810, 0x33e527c1, 0x81aaac72, 0xe0a6608d, 0xeea4ed09, 0x03cc2b9e, 0x1313f52d,
    0xdb0740d2, 0x393f2648, 0x72539713, 0xc634b9a0, 0x915f2d3c, 0x7485c48a, 0x4a760eed, 0x5d448205,
    0x47a3ccc1, 0x7f54a882, 0x268f2238, 0x0d1b7c57, 0x2f434cae, 0x05b1b548, 0xecfb2b02, 0x76682ac0,
    0x90b7290d, 0x730415ba, 0x86430955, 0xb59c563d, 0xed790763, 0xee5dc797, 0x421fe423, 0x27cfe839,
    0x22470d3e, 0x7e8155fb, 0xd38c9a60, 0x4d53d7cb, 0xb6e58eb4, 0xd0784b9b, 0x1bcc3a79, 0x620361f7,
    0xf0b23989, 0xe4aa5e19, 0x9f7f3513, 0x9c1670fb, 0xe0161b42, 0xfcc32d2c, 0xa501f2ba, 0x0bc9dd7f,
    0xffe33972, 0xd8652c5a, 0x10ec90bf, 0x7bdd8307, 0x8dd8794b, 0x4f30c8dd, 0xea2e70a2, 0x6d5d7946,
    0x49e765bc, 0xd9eeb746, 0x827f2462, 0xaafb981c, 0xac03598d, 0x8394ac83, 0xabedf87d, 0xc9cd6631,
    0x2a62487c, 0xc886ac27, 0x78f3b518, 0xe2bacab8, 0xee9b3df8, 0xa499c60a, 0x68e767e2, 0x0eba8b4b,
    0x70ffee72, 0x3b424a2b, 0x9a711ab6, 0x06942bd8, 0x2338ec97, 0x5a6dcfe5, 0x45af6dd0, 0x4e37889b,
    0x3f8dbe23, 0xa7f6a60a, 0x11861f92, 0x847805bc, 0xe9af39cb, 0x328cb7e7, 0x99b593d3, 0x49c095c0,
    0x98d12b3a, 0x5555bdf0, 0xe76f46f8, 0x757d9133, 0xc4b31179, 0xc0bc0883, 0xcc0660b2, 0x6ad427ac,
    0x08098cde, 0x10749ef9, 0xcd9c83f5, 0x61109f2e, 0x01b50638, 0x5420d2f4, 0x16335534, 0x554af480,
    0xf9bc009b, 0xbc43777f, 0x90e47919, 0xf3ff295d, 0x9cd4a041, 0x595c9555, 0xbe0e5ebe, 0x3e7aa8cc,
    0x5d59579e, 0xe35fa5ec, 0x4abfad7e, 0x5c114362, 0x9645b874, 0x5796b862, 0x7789d703, 0xd46dfb9b,
    0x7187e8d9, 0xb786a94e, 0x622ca5de, 0x8a510d89, 0x2dacf88d, 0x80d9fd71, 0x5f958c37, 0x709e862a,
    0xbf08f1d4, 0xd1106c5d, 0xcc598d43, 0x7a82be9d, 0x1b07aaf4, 0xeee690ff, 0x14344cd9, 0x24994537,
    0xe1a50099, 0x52866df9, 0x72811d37, 0xa345c8ae, 0x5d166721, 0x7922e7a0, 0xf96f1da3, 0x786050c2,
    0xfac9419e, 0x1ac537b9, 0x21728240, 0xe97baed0, 0xf24bca3a, 0x49c0d8cb, 0x6eb6d603, 0x54ee74e6,
    0x078dd524, 0x286dd9a8, 0xa280f196, 0x715683ed, 0x6be38a30, 0x31b0c23b, 0x3758646c, 0x9208e018,
    0x34312b09, 0xa78d7968, 0x15efdad8, 0x392b261e, 0xb9a17d4d, 0x33302cbf, 0xa0533835, 0x2fe5bfac,
    0xb5977166, 0x100b04d0, 0xd5ae5640, 0xaa8473f8, 0x0ff7d3cb, 0xbd622623, 0x2d140e0a, 0xda9c8365,
    0x00000000, 0x00000000, 0x0b000000, 0x2d251f15, 0x00403833,
];

/// ML_DSA87 Initialization Vector size
const ML_DSA87_IV_SIZE: usize = 64;

/// ML_DSA87 Key Generation seed
const ML_DSA87_SEED_SIZE: usize = 32;

/// ML_DSA87 SIGN_RND size
const ML_DSA87_SIGN_RND_SIZE: usize = 32;

/// ML_DSA87 MSG size
const ML_DSA87_MSG_SIZE: usize = 64;

/// ML_DSA87 VERIFICATION size
const ML_DSA87_VERIFICATION_SIZE: usize = 64;

/// ML_DSA87 PUBKEY size
const ML_DSA87_PUBKEY_SIZE: usize = PK_LEN;

/// ML_DSA87 SIGNATURE size
// Signature len is unaligned
const ML_DSA87_SIGNATURE_SIZE: usize = SIG_LEN + 1;

/// ML_DSA87 PRIVKEY size
const ML_DSA87_PRIVKEY_SIZE: usize = SK_LEN;

/// The number of CPU clock cycles it takes to perform Ml_Dsa87 operation
const ML_DSA87_OP_TICKS: u64 = 1000;

/// The number of CPU clock cycles to read keys from key vault
const KEY_RW_TICKS: u64 = 100;

register_bitfields! [
    u32,

    /// Control Register Fields
    Control [
        CTRL OFFSET(0) NUMBITS(3) [
            NONE = 0b000,
            KEYGEN = 0b001,
            SIGNING = 0b010,
            VERIFYING = 0b011,
            KEYGEN_AND_SIGN = 0b100,
        ],
        ZEROIZE OFFSET(3) NUMBITS(1) [],
    ],

    /// Status Register Fields
    Status [
        READY OFFSET(0) NUMBITS(1) [],
        VALID OFFSET(1) NUMBITS(1) [],
    ],

    /// Key Vault Read Control Fields
    KvRdSeedCtrl [
        READ_EN OFFSET(0) NUMBITS(1) [],
        READ_ENTRY OFFSET(1) NUMBITS(5) [],
    ],

    /// Key Vault Read Status Fields
    KvRdSeedStatus [
        READY OFFSET(0) NUMBITS(1) [],
        VALID OFFSET(1) NUMBITS(1) [],
        ERROR OFFSET(2) NUMBITS(8) [
            SUCCESS = 0,
            KV_READ_FAIL = 1,
            KV_WRITE_FAIL = 2,
        ],
    ],
];

#[derive(Bus)]
#[poll_fn(poll)]
#[warm_reset_fn(warm_reset)]
#[update_reset_fn(update_reset)]
pub struct Mldsa87 {
    /// Name registers
    #[register_array(offset = 0x0000_0000)]
    name: [u32; 2],

    /// Version registers
    #[register_array(offset = 0x0000_0008)]
    version: [u32; 2],

    /// Control register
    #[register(offset = 0x0000_0010, write_fn = on_write_control)]
    control: ReadWriteRegister<u32, Control::Register>,

    /// Status register
    #[register(offset = 0x0000_0014)]
    status: ReadOnlyRegister<u32, Status::Register>,

    /// Initialization vector for blinding and counter measures
    #[register_array(offset = 0x0000_0018)]
    entropy: [u32; ML_DSA87_IV_SIZE / 4],

    /// Seed size
    #[register_array(offset = 0x0000_0058)]
    seed: [u32; ML_DSA87_SEED_SIZE / 4],

    /// Sign RND
    #[register_array(offset = 0x0000_0078)]
    sign_rnd: [u32; ML_DSA87_SIGN_RND_SIZE / 4],

    /// Message
    #[register_array(offset = 0x0000_0098)]
    msg: [u32; ML_DSA87_MSG_SIZE / 4],

    /// Verification result
    #[register_array(offset = 0x0000_00d8, write_fn = write_access_fault)]
    verify_res: [u32; ML_DSA87_VERIFICATION_SIZE / 4],

    /// Public key
    #[register_array(offset = 0x0000_1000)]
    pubkey: [u32; ML_DSA87_PUBKEY_SIZE / 4],

    /// Signature
    #[register_array(offset = 0x0000_2000)]
    signature: [u32; ML_DSA87_SIGNATURE_SIZE / 4],

    // Private Key In & Out (We don't want to use this)
    /// Key Vault Read Control
    #[register(offset = 0x0000_8000, write_fn = on_write_kv_rd_seed_ctrl)]
    kv_rd_seed_ctrl: ReadWriteRegister<u32, KvRdSeedCtrl::Register>,

    /// Key Vault Read Status
    #[register(offset = 0x0000_8004)]
    kv_rd_seed_status: ReadOnlyRegister<u32, KvRdSeedStatus::Register>,

    /// Error Global Intr register
    #[register(offset = 0x0000_810c)]
    error_global_intr: ReadOnlyRegister<u32>,

    /// Error Internal Intr register
    #[register(offset = 0x0000_8114)]
    error_internal_intr: ReadOnlyRegister<u32>,

    private_key: [u8; ML_DSA87_PRIVKEY_SIZE],

    /// Timer
    timer: Timer,

    /// Key Vault
    key_vault: KeyVault,

    /// Operation complete callback
    op_complete_action: Option<ActionHandle>,

    /// Seed read complete action
    op_seed_read_complete_action: Option<ActionHandle>,
}

impl Mldsa87 {
    /// NAME0 Register Value TODO update when known
    const NAME0_VAL: RvData = 0x73656370; //0x63737065; // secp

    /// NAME1 Register Value TODO update when known
    const NAME1_VAL: RvData = 0x2D333834; // -384

    /// VERSION0 Register Value TODO update when known
    const VERSION0_VAL: RvData = 0x30302E31; // 1.0

    /// VERSION1 Register Value TODO update when known
    const VERSION1_VAL: RvData = 0x00000000;

    pub fn new(clock: &Clock, key_vault: KeyVault) -> Self {
        Self {
            name: [Self::NAME0_VAL, Self::NAME1_VAL],
            version: [Self::VERSION0_VAL, Self::VERSION1_VAL],
            control: ReadWriteRegister::new(0),
            status: ReadOnlyRegister::new(Status::READY::SET.value),
            entropy: Default::default(),
            seed: Default::default(),
            sign_rnd: Default::default(),
            msg: Default::default(),
            verify_res: Default::default(),
            pubkey: [0; ML_DSA87_PUBKEY_SIZE / 4],
            signature: [0; ML_DSA87_SIGNATURE_SIZE / 4],
            kv_rd_seed_ctrl: ReadWriteRegister::new(0),
            kv_rd_seed_status: ReadOnlyRegister::new(0),
            error_global_intr: ReadOnlyRegister::new(0),
            error_internal_intr: ReadOnlyRegister::new(0),
            private_key: [0; ML_DSA87_PRIVKEY_SIZE],
            timer: Timer::new(clock),
            key_vault,
            op_complete_action: None,
            op_seed_read_complete_action: None,
        }
    }

    fn write_access_fault(
        &self,
        _size: RvSize,
        _index: usize,
        _val: RvData,
    ) -> Result<(), BusError> {
        Err(BusError::StoreAccessFault)
    }

    fn zeroize(&mut self) {
        self.control.reg.set(0);
        self.seed = Default::default();
        self.sign_rnd = Default::default();
        self.msg = Default::default();
        self.verify_res = Default::default();
        self.pubkey = [0; ML_DSA87_PUBKEY_SIZE / 4];
        self.signature = [0; ML_DSA87_SIGNATURE_SIZE / 4];
        self.kv_rd_seed_ctrl.reg.set(0);
        self.kv_rd_seed_status.reg.write(KvRdSeedStatus::READY::SET);
        self.private_key = [0; ML_DSA87_PRIVKEY_SIZE];
        // Stop actions
        self.op_complete_action = None;
        self.op_seed_read_complete_action = None;
    }

    /// On Write callback for `control` register
    ///
    /// # Arguments
    ///
    /// * `size` - Size of the write
    /// * `val` - Data to write
    ///
    /// # Error
    ///
    /// * `BusError` - Exception with cause `BusError::StoreAccessFault` or `BusError::StoreAddrMisaligned`
    pub fn on_write_control(&mut self, size: RvSize, val: RvData) -> Result<(), BusError> {
        // Writes have to be Word aligned
        if size != RvSize::Word {
            Err(BusError::StoreAccessFault)?
        }

        // Set the control register
        self.control.reg.set(val);

        match self.control.reg.read_as_enum(Control::CTRL) {
            Some(Control::CTRL::Value::KEYGEN)
            | Some(Control::CTRL::Value::SIGNING)
            | Some(Control::CTRL::Value::VERIFYING)
            | Some(Control::CTRL::Value::KEYGEN_AND_SIGN) => {
                // Reset the Ready and Valid status bits
                self.status
                    .reg
                    .modify(Status::READY::CLEAR + Status::VALID::CLEAR);

                self.op_complete_action = Some(self.timer.schedule_poll_in(ML_DSA87_OP_TICKS));
            }
            _ => {}
        }

        if self.control.reg.is_set(Control::ZEROIZE) {
            self.zeroize();
        }

        Ok(())
    }

    /// On Write callback for `kv_rd_seed_ctrl` register
    ///
    /// # Arguments
    ///
    /// * `size` - Size of the write
    /// * `val` - Data to write
    ///
    /// # Error
    ///
    /// * `BusError` - Exception with cause `BusError::StoreAccessFault` or `BusError::StoreAddrMisaligned`
    pub fn on_write_kv_rd_seed_ctrl(&mut self, size: RvSize, val: RvData) -> Result<(), BusError> {
        // Writes have to be Word aligned
        if size != RvSize::Word {
            Err(BusError::StoreAccessFault)?
        }

        self.kv_rd_seed_ctrl.reg.set(val);

        if self.kv_rd_seed_ctrl.reg.is_set(KvRdSeedCtrl::READ_EN) {
            self.kv_rd_seed_status.reg.modify(
                KvRdSeedStatus::READY::CLEAR
                    + KvRdSeedStatus::VALID::CLEAR
                    + KvRdSeedStatus::ERROR::CLEAR,
            );

            self.op_seed_read_complete_action = Some(self.timer.schedule_poll_in(KEY_RW_TICKS));
        }

        Ok(())
    }

    fn gen_key(&mut self) {
        let seed_bytes = &bytes_from_words_le(&self.seed);
        let mut rng = StdRng::from_seed(*seed_bytes);
        let (pk, sk) = try_keygen_with_rng(&mut rng).unwrap();

        self.pubkey = words_from_bytes_le(&pk.into_bytes());
        self.private_key = sk.into_bytes();
    }

    fn sign(&mut self) {
        let sign_seed = &bytes_from_words_le(&self.sign_rnd);
        let mut rng = StdRng::from_seed(*sign_seed);

        let secret_key = PrivateKey::try_from_bytes(self.private_key).unwrap();

        let message = &bytes_from_words_le(&self.msg);

        // The Ml_Dsa87 signature is 4595 len but the reg is one byte longer
        let signature = secret_key
            .try_sign_with_rng(&mut rng, message, &[])
            .unwrap();
        let signature_extended = {
            let mut sig = [0; SIG_LEN + 1];
            sig[..SIG_LEN].copy_from_slice(&signature);
            sig
        };
        self.signature = words_from_bytes_le(&signature_extended);
    }

    fn verify(&mut self) {
        let message = &bytes_from_words_le(&self.msg);

        let public_key = {
            let key_bytes = &bytes_from_words_le(&self.pubkey);
            PublicKey::try_from_bytes(*key_bytes).unwrap()
        };

        let signature = &bytes_from_words_le(&self.signature);

        let success = public_key.verify(message, &signature[..SIG_LEN].try_into().unwrap(), &[]);

        if success {
            self.verify_res
                .copy_from_slice(&self.signature[..ML_DSA87_VERIFICATION_SIZE / 4]);
        } else {
            self.verify_res.fill(0);
        }
    }

    fn op_complete(&mut self) {
        match self.control.reg.read_as_enum(Control::CTRL) {
            Some(Control::CTRL::Value::KEYGEN) => self.gen_key(),
            Some(Control::CTRL::Value::SIGNING) => {
                self.sign();
                todo!()
            } // NOT used?
            Some(Control::CTRL::Value::VERIFYING) => self.verify(),
            Some(Control::CTRL::Value::KEYGEN_AND_SIGN) => {
                self.gen_key();
                self.sign()
            }
            _ => panic!("Invalid value in ML-DSA Control"),
        }

        self.status
            .reg
            .modify(Status::READY::SET + Status::VALID::SET);
    }

    fn seed_read_complete(&mut self) {
        let key_id = self.kv_rd_seed_ctrl.reg.read(KvRdSeedCtrl::READ_ENTRY);

        // TODO will keyvault feature a special ID for ML-DSA usage?
        let mut key_usage = KeyUsage::default();
        key_usage.set_ecc_key_gen_seed(true);

        let result = self.key_vault.read_key(key_id, key_usage);
        let (seed_read_result, seed) = match result.err() {
            Some(BusError::LoadAccessFault)
            | Some(BusError::LoadAddrMisaligned)
            | Some(BusError::InstrAccessFault) => (KvRdSeedStatus::ERROR::KV_READ_FAIL.value, None),
            Some(BusError::StoreAccessFault) | Some(BusError::StoreAddrMisaligned) => {
                (KvRdSeedStatus::ERROR::KV_WRITE_FAIL.value, None)
            }
            None => (KvRdSeedStatus::ERROR::SUCCESS.value, Some(result.unwrap())),
        };

        // TODO read the first 32 bytes from KV?
        if let Some(seed) = seed {
            self.seed = words_from_bytes_le(
                &<[u8; ML_DSA87_SEED_SIZE]>::try_from(&seed[..ML_DSA87_SEED_SIZE]).unwrap(),
            );
        }

        self.kv_rd_seed_status.reg.modify(
            KvRdSeedStatus::READY::SET
                + KvRdSeedStatus::VALID::SET
                + KvRdSeedStatus::ERROR.val(seed_read_result),
        );
    }

    /// Called by Bus::poll() to indicate that time has passed
    fn poll(&mut self) {
        if self.timer.fired(&mut self.op_complete_action) {
            self.op_complete();
        }
        if self.timer.fired(&mut self.op_seed_read_complete_action) {
            self.seed_read_complete();
        }
    }

    /// Called by Bus::warm_reset() to indicate a warm reset
    fn warm_reset(&mut self) {
        // TODO: Reset registers
    }

    /// Called by Bus::update_reset() to indicate an update reset
    fn update_reset(&mut self) {
        // TODO: Reset registers
    }
}

#[cfg(test)]
mod tests {
    use caliptra_emu_bus::Bus;
    use caliptra_emu_crypto::EndianessTransform;
    use caliptra_emu_types::RvAddr;
    use fips204::ml_dsa_87;
    use tock_registers::registers::InMemoryRegister;

    use super::*;

    const OFFSET_NAME0: RvAddr = 0x0;
    const OFFSET_NAME1: RvAddr = 0x4;
    const OFFSET_VERSION0: RvAddr = 0x8;
    const OFFSET_VERSION1: RvAddr = 0xC;
    const OFFSET_CONTROL: RvAddr = 0x10;
    const OFFSET_STATUS: RvAddr = 0x14;
    const OFFSET_SEED: RvAddr = 0x58;
    const OFFSET_SIGN_RND: RvAddr = 0x78;
    const OFFSET_MSG: RvAddr = 0x98;
    const OFFSET_PK: RvAddr = 0x1000;
    const OFFSET_SIGNATURE: RvAddr = 0x2000;
    const OFFSET_KV_RD_SEED_CONTROL: RvAddr = 0x8000;
    const OFFSET_KV_RD_SEED_STATUS: RvAddr = 0x8004;

    include!("./test_data/ml_dsa87_test_data.rs");

    fn make_word(idx: usize, arr: &[u8]) -> RvData {
        let mut res: RvData = 0;
        for i in 0..4 {
            res |= (arr[idx + i] as RvData) << (i * 8);
        }
        res
    }

    #[test]
    fn test_name() {
        let clock = Clock::new();
        let key_vault = KeyVault::new();

        let mut ml_dsa87 = Mldsa87::new(&clock, key_vault);

        let name0 = ml_dsa87.read(RvSize::Word, OFFSET_NAME0).unwrap();
        let name0 = String::from_utf8_lossy(&name0.to_be_bytes()).to_string();
        assert_eq!(name0, "secp");

        let name1 = ml_dsa87.read(RvSize::Word, OFFSET_NAME1).unwrap();
        let name1 = String::from_utf8_lossy(&name1.to_be_bytes()).to_string();
        assert_eq!(name1, "-384");
    }

    #[test]
    fn test_version() {
        let clock = Clock::new();
        let key_vault = KeyVault::new();

        let mut ml_dsa87 = Mldsa87::new(&clock, key_vault);

        let version0 = ml_dsa87.read(RvSize::Word, OFFSET_VERSION0).unwrap();
        let version0 = String::from_utf8_lossy(&version0.to_le_bytes()).to_string();
        assert_eq!(version0, "1.00");

        let version1 = ml_dsa87.read(RvSize::Word, OFFSET_VERSION1).unwrap();
        let version1 = String::from_utf8_lossy(&version1.to_le_bytes()).to_string();
        assert_eq!(version1, "\0\0\0\0");
    }

    #[test]
    fn test_control() {
        let clock = Clock::new();
        let key_vault = KeyVault::new();

        let mut ml_dsa87 = Mldsa87::new(&clock, key_vault);
        assert_eq!(ml_dsa87.read(RvSize::Word, OFFSET_CONTROL).unwrap(), 0);
    }

    #[test]
    fn test_status() {
        let clock = Clock::new();
        let key_vault = KeyVault::new();

        let mut ml_dsa87 = Mldsa87::new(&clock, key_vault);
        assert_eq!(ml_dsa87.read(RvSize::Word, OFFSET_STATUS).unwrap(), 1);
    }

    #[test]
    fn test_gen_key() {
        let clock = Clock::new();
        let key_vault = KeyVault::new();

        let mut ml_dsa87 = Mldsa87::new(&clock, key_vault);

        let mut seed = [0u8; 32];
        seed.to_big_endian(); // Change DWORDs to big-endian. TODO is this needed?
        for i in (0..seed.len()).step_by(4) {
            ml_dsa87
                .write(RvSize::Word, OFFSET_SEED + i as RvAddr, make_word(i, &seed))
                .unwrap();
        }

        ml_dsa87
            .write(RvSize::Word, OFFSET_CONTROL, Control::CTRL::KEYGEN.into())
            .unwrap();

        loop {
            let status = InMemoryRegister::<u32, Status::Register>::new(
                ml_dsa87.read(RvSize::Word, OFFSET_STATUS).unwrap(),
            );

            if status.is_set(Status::VALID) && status.is_set(Status::READY) {
                break;
            }

            clock.increment_and_process_timer_actions(1, &mut ml_dsa87);
        }

        let mut public_key = bytes_from_words_le(&ml_dsa87.pubkey);
        public_key.to_little_endian(); // Change DWORDs to little-endian. TODO is this needed?

        assert_eq!(&public_key, &PUB_KEY);
    }

    #[test]
    fn test_sign_from_seed() {
        let clock = Clock::new();
        let key_vault = KeyVault::new();

        let mut ml_dsa87 = Mldsa87::new(&clock, key_vault);

        let mut seed = [0u8; 32];
        seed.to_big_endian(); // Change DWORDs to big-endian. TODO is this needed?
        for i in (0..seed.len()).step_by(4) {
            ml_dsa87
                .write(RvSize::Word, OFFSET_SEED + i as RvAddr, make_word(i, &seed))
                .unwrap();
        }

        let mut msg = [0u8; 64];
        msg.to_big_endian(); // Change DWORDs to big-endian. TODO is this necessary

        for i in (0..msg.len()).step_by(4) {
            ml_dsa87
                .write(RvSize::Word, OFFSET_MSG + i as RvAddr, make_word(i, &msg))
                .unwrap();
        }

        let mut sign_rnd = SIGN_RND;
        sign_rnd.to_big_endian(); // Change DWORDs to big-endian.

        for i in (0..SIGN_RND.len()).step_by(4) {
            ml_dsa87
                .write(
                    RvSize::Word,
                    OFFSET_SIGN_RND + i as RvAddr,
                    make_word(i, &sign_rnd),
                )
                .unwrap();
        }

        ml_dsa87
            .write(
                RvSize::Word,
                OFFSET_CONTROL,
                Control::CTRL::KEYGEN_AND_SIGN.into(),
            )
            .unwrap();

        loop {
            let status = InMemoryRegister::<u32, Status::Register>::new(
                ml_dsa87.read(RvSize::Word, OFFSET_STATUS).unwrap(),
            );

            if status.is_set(Status::VALID) && status.is_set(Status::READY) {
                break;
            }

            clock.increment_and_process_timer_actions(1, &mut ml_dsa87);
        }

        let mut signature = bytes_from_words_le(&ml_dsa87.signature);
        signature.to_little_endian(); // Change DWORDs to little-endian.

        assert_eq!(&signature, &SIGNATURE);
    }

    #[test]
    fn test_verify() {
        let clock = Clock::new();
        let key_vault = KeyVault::new();

        let mut ml_dsa87 = Mldsa87::new(&clock, key_vault);

        let msg = [0u8; 64];
        for i in (0..msg.len()).step_by(4) {
            ml_dsa87
                .write(RvSize::Word, OFFSET_MSG + i as RvAddr, make_word(i, &msg))
                .unwrap();
        }

        let mut pub_key = PUB_KEY;
        pub_key.to_big_endian();

        for i in (0..pub_key.len()).step_by(4) {
            ml_dsa87
                .write(
                    RvSize::Word,
                    OFFSET_PK + i as RvAddr,
                    make_word(i, &pub_key),
                )
                .unwrap();
        }

        // Good signature
        let mut signature = SIGNATURE;
        signature.to_big_endian();

        for i in (0..signature.len()).step_by(4) {
            ml_dsa87
                .write(
                    RvSize::Word,
                    OFFSET_SIGNATURE + i as RvAddr,
                    make_word(i, &signature),
                )
                .unwrap();
        }

        ml_dsa87
            .write(
                RvSize::Word,
                OFFSET_CONTROL,
                Control::CTRL::VERIFYING.into(),
            )
            .unwrap();

        loop {
            let status = InMemoryRegister::<u32, Status::Register>::new(
                ml_dsa87.read(RvSize::Word, OFFSET_STATUS).unwrap(),
            );

            if status.is_set(Status::VALID) && status.is_set(Status::READY) {
                break;
            }

            clock.increment_and_process_timer_actions(1, &mut ml_dsa87);
        }

        let mut result = bytes_from_words_le(&ml_dsa87.verify_res);
        result.to_little_endian();

        assert_eq!(result, &SIGNATURE[..ML_DSA87_VERIFICATION_SIZE]);

        // Bad signature
        let mut signature = [0; SIG_LEN + 1];
        signature.to_big_endian();

        for i in (0..signature.len()).step_by(4) {
            ml_dsa87
                .write(
                    RvSize::Word,
                    OFFSET_SIGNATURE + i as RvAddr,
                    make_word(i, &signature),
                )
                .unwrap();
        }

        ml_dsa87
            .write(
                RvSize::Word,
                OFFSET_CONTROL,
                Control::CTRL::VERIFYING.into(),
            )
            .unwrap();

        loop {
            let status = InMemoryRegister::<u32, Status::Register>::new(
                ml_dsa87.read(RvSize::Word, OFFSET_STATUS).unwrap(),
            );

            if status.is_set(Status::VALID) && status.is_set(Status::READY) {
                break;
            }

            clock.increment_and_process_timer_actions(1, &mut ml_dsa87);
        }

        let mut result = bytes_from_words_le(&ml_dsa87.verify_res);
        result.to_little_endian();

        assert_eq!(&result, &[0; 64]);
    }

    #[test]
    fn test_gen_key_kv_seed() {
        // Test for getting the seed from the key-vault.
        for key_id in 0..KeyVault::KEY_COUNT {
            let clock = Clock::new();
            let mut seed = [0u8; 32];
            seed.to_big_endian(); // Change DWORDs to big-endian.

            let mut key_vault = KeyVault::new();
            let mut key_usage = KeyUsage::default();
            key_usage.set_ecc_key_gen_seed(true);

            key_vault
                .write_key(key_id, &seed, u32::from(key_usage))
                .unwrap();

            let mut ml_dsa87 = Mldsa87::new(&clock, key_vault);

            // We expect the output to match seed 0. Write a different seed first to make sure the Kv seed is used
            let mut seed = [0xABu8; 32];
            seed.to_big_endian(); // Change DWORDs to big-endian. TODO is this needed?
            for i in (0..seed.len()).step_by(4) {
                ml_dsa87
                    .write(RvSize::Word, OFFSET_SEED + i as RvAddr, make_word(i, &seed))
                    .unwrap();
            }

            // Instruct seed to be read from key-vault.
            let seed_ctrl = InMemoryRegister::<u32, KvRdSeedCtrl::Register>::new(0);
            seed_ctrl.modify(KvRdSeedCtrl::READ_ENTRY.val(key_id) + KvRdSeedCtrl::READ_EN.val(1));

            ml_dsa87
                .write(RvSize::Word, OFFSET_KV_RD_SEED_CONTROL, seed_ctrl.get())
                .unwrap();

            // Wait for ml_dsa87 periph to retrieve the seed from key-vault.
            loop {
                let seed_read_status = InMemoryRegister::<u32, KvRdSeedStatus::Register>::new(
                    ml_dsa87
                        .read(RvSize::Word, OFFSET_KV_RD_SEED_STATUS)
                        .unwrap(),
                );

                if seed_read_status.is_set(KvRdSeedStatus::VALID) {
                    assert_eq!(
                        seed_read_status.read(KvRdSeedStatus::ERROR),
                        KvRdSeedStatus::ERROR::SUCCESS.value
                    );
                    break;
                }
                clock.increment_and_process_timer_actions(1, &mut ml_dsa87);
            }

            ml_dsa87
                .write(RvSize::Word, OFFSET_CONTROL, Control::CTRL::KEYGEN.into())
                .unwrap();

            loop {
                let status = InMemoryRegister::<u32, Status::Register>::new(
                    ml_dsa87.read(RvSize::Word, OFFSET_STATUS).unwrap(),
                );
                if status.is_set(Status::VALID) && status.is_set(Status::READY) {
                    break;
                }
                clock.increment_and_process_timer_actions(1, &mut ml_dsa87);
            }

            let mut public_key = bytes_from_words_le(&ml_dsa87.pubkey);
            public_key.to_little_endian(); // Change DWORDs to little-endian. TODO is this needed?

            assert_eq!(&public_key, &PUB_KEY);
        }
    }

    // This test uses the FIPS API to verify the signature and it passes.
    #[test]
    fn test_sign() {
        use fips204::ml_dsa_87::KG;
        use fips204::traits::KeyGen;
        use zerocopy::AsBytes;

        let priv_key = {
            let key_bytes: [u8; 4896] = VENDOR_MLDSA_KEY_1_PRIVATE.as_bytes().try_into().unwrap();
            PrivateKey::try_from_bytes(key_bytes).unwrap()
        };

        // Public key is in non-hw format. SHould not be converted.
        let pub_key = {
            let key_bytes: [u8; 2592] = VENDOR_MLDSA_KEY_1_PUBLIC.as_bytes().try_into().unwrap();
            PublicKey::try_from_bytes(key_bytes).unwrap()
        };

        // Message is in hw format. Convert it to non-hw format.
        let mut message = MESSAGE.clone();
        message.to_little_endian();

        // Signature is in non-hw format. Should not be converted.
        let mut rng = StdRng::from_seed([0u8; 32]);
        let signature = priv_key.try_sign_with_rng(&mut rng, &message, &[]).unwrap();

        let v = pub_key.verify(&message, &signature, &[]);
        assert!(v);

        let signature_extended = {
            let mut sig = [0u8; SIG_LEN + 1];
            sig[..SIG_LEN].copy_from_slice(&signature);
            sig
        };

        assert_eq!(&signature_extended, VENDOR_SIGNATURE.as_bytes());
    }
}
